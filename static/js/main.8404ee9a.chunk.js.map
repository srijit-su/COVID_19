{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","latest","setLatest","results","setResults","search","setSearch","useEffect","axios","all","get","then","responderArr","data","catch","err","console","log","lastUpdated","Date","parseInt","updated","toString","countries","filter","item","country","includes","map","i","Card","key","bg","text","className","style","margin","Img","variant","src","countryInfo","flag","Body","Title","Text","color","cases","deaths","recovered","todayCases","todayDeaths","active","critical","textAlign","CardDeck","borderRadius","Footer","Form","Group","controlId","Control","type","placeholder","onChange","e","target","value","queries","columns","query","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4RAyHeA,MAhHf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGeJ,mBAAS,KAHxB,mBAGNK,EAHM,KAGEC,EAHF,KAIbC,qBAAU,WACRC,IACGC,IAAI,CACHD,IAAME,IAAI,oCACVF,IAAME,IAAI,4CAEXC,MAAK,SAAAC,GACJV,EAAUU,EAAa,GAAGC,MAC1BT,EAAWQ,EAAa,GAAGC,SAE5BC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QAEf,IAEH,IACMG,EADO,IAAIC,KAAKC,SAASnB,EAAOoB,UACbC,WAKnBC,EAHgBpB,EAAQqB,QAAO,SAAAC,GACnC,MAAiB,KAAVpB,EAAeoB,EAAKC,QAAQC,SAAStB,GAAUoB,KAExBG,KAAI,SAACf,EAAKgB,GACxC,OACE,kBAACC,EAAA,EAAD,CAAMC,IAAKF,EAAGG,GAAG,QAAQC,KAAK,OAAOC,UAAU,cAAcC,MAAO,CAACC,OAAO,SAC1E,kBAACN,EAAA,EAAKO,IAAN,CAAUC,QAAQ,MAAMC,IAAK1B,EAAK2B,YAAYC,OAC9C,kBAACX,EAAA,EAAKY,KAAN,KACE,kBAACZ,EAAA,EAAKa,MAAN,KAAa9B,EAAKa,SAClB,kBAACI,EAAA,EAAKc,KAAN,CAAWT,MAAO,CAACU,MAAM,SAAzB,UAA0ChC,EAAKiC,OAC/C,kBAAChB,EAAA,EAAKc,KAAN,CAAWT,MAAO,CAACU,MAAM,QAAzB,WAA0ChC,EAAKkC,QAC/C,kBAACjB,EAAA,EAAKc,KAAN,CAAWT,MAAO,CAACU,MAAM,UAAzB,cAA+ChC,EAAKmC,WACpD,kBAAClB,EAAA,EAAKc,KAAN,CAAWT,MAAO,CAACU,MAAM,SAAzB,kBAAkDhC,EAAKoC,YACvD,kBAACnB,EAAA,EAAKc,KAAN,CAAWT,MAAO,CAACU,MAAM,QAAzB,mBAAkDhC,EAAKqC,aACvD,kBAACpB,EAAA,EAAKc,KAAN,CAAWT,MAAO,CAACU,MAAM,WAAzB,WAA6ChC,EAAKsC,QAClD,kBAACrB,EAAA,EAAKc,KAAN,CAAWT,MAAO,CAACU,MAAM,WAAzB,aAA+ChC,EAAKuC,eAmB5D,OACE,6BACA,6BACA,wBAAIjB,MAAS,CAAEkB,UAAY,WAA3B,6BACA,6BACE,kBAACC,EAAA,EAAD,KAEE,kBAACxB,EAAA,EAAD,CAAME,GAAG,OAAOC,KAAO,QAASC,UAAU,cAAeC,MAAO,CAACoB,aAAa,SAE5E,kBAACzB,EAAA,EAAKY,KAAN,KACE,kBAACZ,EAAA,EAAKa,MAAN,cACA,kBAACb,EAAA,EAAKc,KAAN,KACG3C,EAAO6C,QAGZ,kBAAChB,EAAA,EAAK0B,OAAN,KACE,+CAAqBtC,KAGzB,kBAACY,EAAA,EAAD,CAAME,GAAI,SAASC,KAAM,QAAUC,UAAU,cAAcC,MAAO,CAACoB,aAAa,SAE9E,kBAACzB,EAAA,EAAKY,KAAN,KACE,kBAACZ,EAAA,EAAKa,MAAN,eACA,kBAACb,EAAA,EAAKc,KAAN,KACK3C,EAAO8C,SAGd,kBAACjB,EAAA,EAAK0B,OAAN,KACE,+CAAqBtC,KAGzB,kBAACY,EAAA,EAAD,CAAME,GAAI,UAAUC,KAAM,QAAUC,UAAU,cAAcC,MAAO,CAACoB,aAAa,SAE/E,kBAACzB,EAAA,EAAKY,KAAN,KACE,kBAACZ,EAAA,EAAKa,MAAN,kBACA,kBAACb,EAAA,EAAKc,KAAN,KACG3C,EAAO+C,YAGZ,kBAAClB,EAAA,EAAK0B,OAAN,KACE,+CAAqBtC,MAI3B,6BACA,kBAACuC,EAAA,EAAD,CAAMtB,MAAO,CAACC,OAAO,SACnB,kBAACqB,EAAA,EAAKC,MAAN,CAAYC,UAAU,mBAEpB,kBAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,OAAOC,YAAY,wDAAwDC,SAAU,SAAAC,GAAC,OAAI1D,EAAU0D,EAAEC,OAAOC,YAGpI,kBAAC,IAAD,CAASC,QA7DC,CAAC,CACbC,QAAS,EACTC,MAAM,mBACL,CACDD,QAAQ,EACRC,MAAM,sBAwDwB9C,KCxGd+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvE,MAAK,SAAAwE,GACJA,EAAaC,gBAEdtE,OAAM,SAAAuE,GACLrE,QAAQqE,MAAMA,EAAMC,c","file":"static/js/main.8404ee9a.chunk.js","sourcesContent":["import React,{ useEffect, useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from \"axios\";\n//import CardColumns from 'react-bootstrap/CardColumns';\nimport Columns from 'react-columns';\nimport Form from 'react-bootstrap/Form';\n\nfunction App() {\n  const [latest, setLatest] = useState([]);\n  const [results, setResults] = useState([]);\n  const [search, setSearch] = useState(\" \");\n  useEffect(() =>{\n    axios\n      .all([\n        axios.get(\"https://corona.lmao.ninja/v2/all\"),\n        axios.get(\"https://corona.lmao.ninja/v2/countries\")\n    ])\n      .then(responderArr =>{\n        setLatest(responderArr[0].data);\n        setResults(responderArr[1].data);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, []);\n\n  const date = new Date(parseInt(latest.updated));\n  const lastUpdated = date.toString();\n\n  const filterCountry = results.filter(item => {\n    return search !==\"\" ? item.country.includes(search) : item;\n  })\n  const countries = filterCountry.map((data,i) =>{\n    return (\n      <Card key={i} bg=\"light\" text=\"dark\" className=\"text-center\" style={{margin:\"20px\"}}>\n        <Card.Img variant=\"top\" src={data.countryInfo.flag} />\n        <Card.Body>\n          <Card.Title>{data.country}</Card.Title>\n          <Card.Text style={{color:\"blue\"}}>Cases  {data.cases}</Card.Text>\n          <Card.Text style={{color:\"red\"}}>Deaths  {data.deaths}</Card.Text>\n          <Card.Text style={{color:\"green\"}}>Recovered  {data.recovered}</Card.Text>\n          <Card.Text style={{color:\"blue\"}}>Today's Cases  {data.todayCases}</Card.Text>\n          <Card.Text style={{color:\"red\"}}>Today's Deaths  {data.todayDeaths}</Card.Text>\n          <Card.Text style={{color:\"maroon\"}}>Active  {data.active}</Card.Text>\n          <Card.Text style={{color:\"maroon\"}}>Critical  {data.critical}</Card.Text>\n        </Card.Body>\n      </Card>\n          \n    );\n  });\n\n\n\n  var queries = [{\n    columns: 2,\n    query:'min-width:500px'\n  }, {\n    columns:3,\n    query:'min-width:1000px'\n  \n  }];\n\n\n  return (\n    <div>\n    <br /> \n    <h2 style = {{ textAlign : \"center\"}}>WORLD COVID-19 LIVE STATS</h2>\n    <br />\n      <CardDeck>\n        \n        <Card bg=\"info\" text = \"white\"  className=\"text-center\"  style={{borderRadius:\"40px\"}}>\n          \n          <Card.Body>\n            <Card.Title>Cases</Card.Title>\n            <Card.Text>\n              {latest.cases}\n            </Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n        <Card bg =\"danger\" text={\"white\"}  className=\"text-center\" style={{borderRadius:\"40px\"}}>\n          \n          <Card.Body>\n            <Card.Title>Deaths</Card.Title>\n            <Card.Text>\n                {latest.deaths}\n            </Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n        <Card bg =\"success\" text={\"white\"}  className=\"text-center\" style={{borderRadius:\"40px\"}}>\n\n          <Card.Body>\n            <Card.Title>Recovered</Card.Title>\n            <Card.Text>\n              {latest.recovered}\n      </Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n      </CardDeck>\n      <br />\n      <Form style={{margin:\"40px\"}}>\n        <Form.Group controlId=\"formGroupSearch\">\n          \n          <Form.Control type=\"text\" placeholder=\"Search Country....(first letter must be in uppercase)\" onChange={e => setSearch(e.target.value)}></Form.Control>\n        </Form.Group>\n      </Form>\n      <Columns queries={queries}>{countries}</Columns>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}